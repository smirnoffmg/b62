name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.0)"
        required: true
        default: "0.1.0"
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for version detection
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        id: version
        run: |
          gh auth setup-git
          gh repo sync

          echo "Manual workflow dispatch detected"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Release type: ${{ github.event.inputs.release_type }}"

          # Get initial version for logging
          old_version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $old_version"

          # Update version based on input
          if [ "${{ github.event.inputs.version }}" != "0.1.0" ]; then
            echo "Setting version to ${{ github.event.inputs.version }}"
            uv version --frozen "${{ github.event.inputs.version }}"
          else
            echo "Bumping version with type: ${{ github.event.inputs.release_type }}"
            uv version --frozen --bump "${{ github.event.inputs.release_type }}"
          fi

          # Get and validate new version
          version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          tag_name="v$version"
          echo "Version updated from $old_version to $version"

          # Check if tag exists and bump if needed
          while git rev-parse "$tag_name" >/dev/null 2>&1; do
            echo "Tag $tag_name already exists. Bumping patch version..."
            uv version --frozen --bump patch
            version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
            tag_name="v$version"
            echo "New version: $version"
          done

          # Show changes
          echo ""

          # Commit version change
          git add pyproject.toml
          git commit -m "Release $tag_name"
          git push origin main

          # Create and push tag
          git tag -a "$tag_name" -m "Release $tag_name"
          echo "Created tag $tag_name"
          git push origin tag "$tag_name"

          # Set outputs for other jobs
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
        env:
          CI: true
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release -i python3.12
          manylinux: auto

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/
          retention-days: 1

  publish:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels/

      - name: Move wheels to dist directory
        run: |
          mkdir -p dist
          # Move all wheels from subdirectories to dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
